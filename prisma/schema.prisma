// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id
  username               String          @unique
  avatar                 String?
  cover                  String?
  name                   String?
  surname                String?
  penaltyApplied         Boolean         @default(false)
  description            String?
  city                   String?
  school                 String?
  work                   String?
  isAdmin                Boolean         @default(false)
  balance                Float?          @default(0)
  createdAt              DateTime        @default(now())
  posts                  Post[]
  likes                  Like[]
  followers              Follower[]      @relation("UserFollowers")
  followings             Follower[]      @relation("UserFollowings")
  followRequestsSent     FollowRequest[] @relation("FollowRequestsSent")
  followRequestsReceived FollowRequest[] @relation("FollowRequestsReceived")
  stories                Story[]
  attendances            Attendance[]
}

model Post {
  id               Int          @id @default(autoincrement())
  desc             String
  img              String?
  title            String?
  eventStartTime   DateTime?
  penaltiesApplied Boolean      @default(false)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  penaltyAmount    Float?       @default(0) // New field
  userId           String
  isLikeDisabled   Boolean      @default(false)
  likes            Like[]
  attendances      Attendance[]
}

model Like {
  // Will Atended Button
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  commentId Int?

  @@unique([userId, postId])
}

model Follower {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
}

model FollowRequest {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  sender     User     @relation("FollowRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   User     @relation("FollowRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String

  @@unique([senderId, receiverId])
}

model Story {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  expiresAt DateTime
  img       String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
}

model TeamDivision {
  id          Int      @id @default(autoincrement())
  postId      Int
  teamA       String   @db.Text
  teamB       String   @db.Text
  substitutes String   @db.Text
  createdAt   DateTime @default(now())
}

model Attendance {
  id         Int      @id @default(autoincrement())
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  attendedAt DateTime

  @@unique([postId, userId])
}
